pipeline {
    agent { label 'build-node' }

    environment {
        AWS_REGION = 'eu-central-1'
        AWS_REPOSITORY_URL = '214404897309.dkr.ecr.eu-central-1.amazonaws.com'
        AWS_ROLE = 'arn:aws:iam::214404897309:role/npgw-services-github-oidc-provider'

        IMAGE_FILE = '.github/IMAGE_LIST.json'
    }

    stages {
        stage('Trigger build-a-version pipeline') {
            steps {
                script {
                    def buildResult = build job: 'build-a-version',
                                        parameters: [
                                            string(name: 'MAJOR_VERSION', value: '0.1'),
                                            booleanParam(name: 'RUN_TESTS', value: true)
                                        ],
                                        wait: true,
                                        propagate: false
                    if (buildResult.result != 'SUCCESS') {
                        slackSend channel: '#npgw-notification-jenkins',
                                  color: 'danger',
                                  message: "❌ *build-a-version* failed – see <${buildRes.absoluteUrl}|#${buildRes.number}>"
                        error("Downstream pipeline failed")
                    }
                }
            }
        }

        stage('Trigger deploy-a-version pipeline: DEV environment') {
            steps {
                script {
                    def devResult = build job: 'deploy-a-version',
                                        parameters: [
                                            string(name: 'ENVIRONMENT_NAME', value: 'dev'),
                                            booleanParam(name: 'RUN_TESTS', value: true)
                                        ],
                                        wait: true,
                                        propagate: false
                    if (devResult.result != 'SUCCESS') {
                        slackSend channel: '#npgw-notification-jenkins',
                                  color: 'danger',
                                  message: "❌ *deploy-a-version (DEV)* failed – see <${devRes.absoluteUrl}|#${devRes.number}>"
                        error("DEV deploy failed")
                    }
                }
            }
        }

        stage('Trigger deploy-a-version pipeline: TEST environment') {
            steps {
                script {
                    def testResult = build job: 'deploy-a-version',
                                        parameters: [
                                            string(name: 'ENVIRONMENT_NAME', value: 'test'),
                                            booleanParam(name: 'RUN_TESTS', value: true)
                                        ],
                                        wait: true,
                                        propagate: false
                    if (testRes.result != 'SUCCESS') {
                        slackSend channel: '#npgw-notification-jenkins',
                                  /*tokenCredentialId: 'slack-token',*/
                                  color: 'danger',
                                  message: "❌ *deploy-a-version (TEST)* failed – see <${testRes.absoluteUrl}|#${testRes.number}>"
                        error("TEST deploy failed")
                    }
                }
            }
        }
    }

    post {
        success {
            slackSend channel: '#npgw-notification-jenkins',
                      color: 'good',
                      message: "✅ *SUCCESS*: `${env.JOB_NAME}` <${env.BUILD_URL}|#${env.BUILD_NUMBER}>"
        }
        failure {
            slackSend channel: '#npgw-notification-jenkins',
                      color: 'danger',
                      message: "❌ *FAILURE*: `${env.JOB_NAME}` <${env.BUILD_URL}|#${env.BUILD_NUMBER}>"
        }
    }

}