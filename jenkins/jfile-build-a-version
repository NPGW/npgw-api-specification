pipeline {
    agent { label 'build-node' }

    parameters {
        string(name: 'MAJOR_VERSION', defaultValue: '0.1', description: 'Major version')
        booleanParam(name: 'RUN_TESTS', defaultValue: true, description: 'If unchecked, API tests will be skipped')
    }

    environment {
        AWS_REGION = 'eu-central-1'
        AWS_REPOSITORY_URL = '214404897309.dkr.ecr.eu-central-1.amazonaws.com'
        AWS_ROLE = 'arn:aws:iam::214404897309:role/npgw-jenkins-build-a-version-role'
        AWS_BUCKET_NAME = 'npgw-versions'

        IMAGE_FILE = 'npgw-services/.github/IMAGE_LIST.json'
    }

    stages {
        stage('Checkout') {
            steps {
                dir('npgw-services') {
                    git credentialsId: 'github-pat', url: 'https://github.com/NPGW/npgw-services.git', branch: 'feature/new-image-in-list'
                }

                dir('npgw-portal') {
                    git credentialsId: 'github-pat', url: 'https://github.com/NPGW/npgw-portal.git', branch: 'feature/dockerize-ui'
                }
            }
        }

        stage('Get Release Version') {
            steps {
                script {
                    env.RELEASE_VERSION = params.MAJOR_VERSION + sh(script: "echo .\$(date -u +%y%m%d%H%M)", returnStdout: true).trim()
                }
            }
        }

        stage('Validate Release Version') {
            steps {
                script {
                    if (!env.RELEASE_VERSION) {
                        error("Release version is null. Exiting...")
                    }
                }
            }
        }

        stage('Trigger GitHub Actions Release') {
            steps {
            // assuming you’ve stored a GitHub PAT in Jenkins as “github-pat”
                withCredentials([string(credentialsId: 'github-pat', variable: 'GH_TOKEN')]) {
                    script {
                        // repo you want to trigger
                        def owner        = 'NPGW'
                        def repo         = 'npgw-portal'
                        // the exact filename (or workflow ID) of your GitHub Actions workflow
                        def workflowFile = 'build-and-release.yml'
                        // branch or ref you want the workflow to run on
                        def ref          = 'feature/dockerize-ui'

                        sh """
                            gh auth login --with-token <<< "${GH_TOKEN}"
                            gh workflow run build-and-release.yml \
                            --repo ${owner}/${repo} \
                            --ref ${ref} \
                            -f version=${env.RELEASE_VERSION}
                        """
                    }
                }
            }
        }

        stage('Build backend (npgw-services)') {
            steps {
                script {
                    sh """
                        cd ./npgw-services
                        sed -i \"s/<revision>.*<\\/revision>/<revision>${env.RELEASE_VERSION}<\\/revision>/g\" ./pom.xml
                        mvn clean verify
                    """
                }
            }
        }

        stage('Build frontend (npgw-portal)') {
            steps {
                script {
                    sh """
                        cd ./npgw-portal
                        npm install
                        npm run build
                    """
                }
            }
        }

        stage('Test in embedded environment (EE)') {
            when {
                expression {
                    return params.RUN_TESTS
                }
            }
            steps {
                withCredentials([string(credentialsId: 'localstack-auth-token', variable: 'LOCALSTACK_AUTH_TOKEN')]) {
                    script {
                        sh """
                            echo LOCALSTACK_AUTH_TOKEN=${LOCALSTACK_AUTH_TOKEN} > .env
                            cd ./npgw-services/tests/docker/docker-compose
                            ./run-docker-compose-test.sh
                        """
                    }
                }
            }
        }

        stage('Assume Correct AWS Role') {
            steps {
                script {
                    def credentialsJson = sh(script: """
                        aws sts assume-role \
                            --role-arn ${env.AWS_ROLE} \
                            --role-session-name JenkinsUploadSession
                        """, returnStdout: true).trim()

                    env.AWS_ACCESS_KEY_ID = sh(script: "echo '${credentialsJson}' | jq -r '.Credentials.AccessKeyId'", returnStdout: true).trim()
                    env.AWS_SECRET_ACCESS_KEY = sh(script: "echo '${credentialsJson}' | jq -r '.Credentials.SecretAccessKey'", returnStdout: true).trim()
                    env.AWS_SESSION_TOKEN = sh(script: "echo '${credentialsJson}' | jq -r '.Credentials.SessionToken'", returnStdout: true).trim()
                }
            }
        }

        stage('Build and push Docker image') {
            steps {
                script {
                    def imageList = readJSON text: sh(script: "cat ${WORKSPACE}/${IMAGE_FILE}", returnStdout: true).trim()
                    for (image in imageList) {
                        def imageUrl = "${env.AWS_REPOSITORY_URL}/npgw/${image.repoName}:${env.RELEASE_VERSION}"

                        sh """
                        aws ecr get-login-password --region ${env.AWS_REGION} | docker login --username AWS --password-stdin ${env.AWS_REPOSITORY_URL}

                        cd ${WORKSPACE}
                        cd ${image.dockerContext}

                        docker build -t "${imageUrl}" -f ${image.dockerFile} .
                        docker push "${imageUrl}"
                        """
                    }
                }
            }
        }

        stage('Upload portal UI build to S3') {
            steps {
                script {
                    sh """
                    aws s3 sync npgw-portal/dist s3://${env.AWS_BUCKET_NAME}/npgw-portal/build_${env.RELEASE_VERSION}
                    """
                }
            }
        }
    }
}