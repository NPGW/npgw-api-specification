pipeline {
    agent { label 'build-node' }

    parameters {
        string(name: 'MAJOR_VERSION', defaultValue: '0.1', description: 'Major version')
        booleanParam(name: 'RUN_TESTS', defaultValue: true, description: 'If unchecked, API tests will be skipped')
    }

    environment {
        AWS_REGION = 'eu-central-1'
        AWS_REPOSITORY_URL = '214404897309.dkr.ecr.eu-central-1.amazonaws.com'
        AWS_ROLE = 'arn:aws:iam::214404897309:role/npgw-jenkins-build-a-version-role'
        AWS_BUCKET_NAME = 'npgw-versions'

        IMAGE_FILE = 'npgw-services/.github/IMAGE_LIST.json'
    }

    stages {
        stage('Checkout') {
            steps {
                dir('npgw-services') {
                    git credentialsId: 'github-pat', url: 'https://github.com/NPGW/npgw-services.git', branch: 'feature/new-image-in-list'
                }

                dir('npgw-portal') {
                    git credentialsId: 'github-pat', url: 'https://github.com/NPGW/npgw-portal.git', branch: 'feature/dockerize-ui'
                }
            }
        }

        stage('Get Release Version') {
            steps {
                script {
                    env.RELEASE_VERSION = params.MAJOR_VERSION + sh(script: "echo .\$(date -u +%y%m%d%H%M)", returnStdout: true).trim()
                }
            }
        }

        stage('Validate Release Version') {
            steps {
                script {
                    if (!env.RELEASE_VERSION) {
                        error("Release version is null. Exiting...")
                    }
                }
            }
        }

        stage('Trigger GitHub Actions Release') {
            steps {
                withCredentials([string(credentialsId: 'GH_TOKEN', variable: 'GH_TOKEN')]) {
                    script {
                        def owner        = 'NPGW'
                        def repo         = 'npgw-portal'
                        def workflow     = 'build-draft-release.yml'
                        def ref          = 'main'
                        def version      = env.RELEASE_VERSION

                        // 1) kick off the workflow (no --json, it just prints a confirmation)
                        sh """
                          gh workflow run ${workflow} \\
                            --repo ${owner}/${repo} \\
                            --ref ${ref} \\
                            -f version=${version}
                        """
                        echo ' → Started GitHub workflow ${workflow} run with ID: ${runId}'

                        // 2) grab the most recent run ID for that workflow+branch
                        def runId = sh(
                          script:  """
                            gh run list \\
                              --repo ${owner}/${repo} \\
                              --workflow ${workflow} \\
                              --branch ${ref} \\
                              --limit 1 \\
                              --json databaseId,createdAt \\
                              -q '.[0].databaseId'
                          """.stripIndent(),
                          returnStdout: true
                        ).trim()
                        echo "→ watching run #${runId}"

                        // 3) now block until it finishes
                        sh "gh run watch ${runId} --repo ${owner}/${repo} --exit-status"
                        echo "→ run #${runId} completed"

                        env.GH_RUN_ID = runId
                    }
                }
            }
        }

            stage('Wait for Draft Release to be Ready') {
              steps {
              withCredentials([string(credentialsId: 'GH_TOKEN', variable: 'GH_TOKEN')]) {
                script {
                        def owner   = 'NPGW'
                        def repo    = 'npgw-portal'
                        def version = env.RELEASE_VERSION

                        timeout(time: 5, unit: 'MINUTES') {
                          waitUntil {
                                      def assetCount = 0
                                      def raw = sh(
                                        script: """\
                                          gh release list \\
                                            --repo ${owner}/${repo} \\
                                            --limit 100 \\
                                            --json tagName,assets
                                        """.stripIndent(),
                                        returnStdout: true
                                      ).trim()
                                    try {
                                      // 1) Grab up to 100 releases (drafts included)
                                      def ra2w = sh(
                                        script: """\
                                          gh release list \\
                                            --repo ${owner}/${repo} \\
                                            --limit 100 \\
                                            --json tagName,assets
                                        """.stripIndent(),
                                        returnStdout: true
                                      ).trim()

                                      // 2) parse it as JSON
                                      def releases = readJSON text: raw

                                      // 3) find the one matching our tag
                                      def rel = releases.find { it.tagName == version }

                                      // 4) count its assets (or stay at zero)
                                      assetCount = rel?.assets?.size() ?: 0
                                    } catch (e) {
                                      echo "→ still waiting (got: ${e.message})"
                                      echo "${raw}"
                                      echo "${raw}"
                                      echo "${raw}"
                                    }

                                    echo "→ Release ${version} has ${assetCount} asset(s)"
                                    if (assetCount > 0) {
                                      return true
                                    } else {
                                      sleep time: 10, unit: 'SECONDS'
                                      return false
                                    }
                          }
                    }
                }
            }
            }
            }


        stage('Download UI build from Draft Release') {
            steps {
                withCredentials([string(credentialsId: 'GH_TOKEN', variable: 'GH_TOKEN')]) {
                    script {
                        def owner = 'NPGW'
                        def repo = 'npgw-portal'
                        def targetDir = "${WORKSPACE}/npgw-portal"
                        def targetFile = "dist.zip"
                        sh """
                            gh release download ${env.RELEASE_VERSION} \
                            --repo ${owner}/${repo} \
                            --pattern ${targetFile} \
                            --dir ${targetDir}

                            if [ ! -f "${targetDir}/${targetFile}" ]; then
                                echo "ERROR: ${targetFile} not found in ${targetDir}" >&2
                                exit 1
                            fi

                            echo ' → ${targetFile} downloaded to ${targetDir}'
                        """

                    }
                }
            }
        }

        stage('Unzip UI build into dist/') {
            steps {
                script {
                    def sourceFile = "dist.zip"
                    def sourceDir = "${WORKSPACE}/npgw-portal"
                    def targetDir   = "${WORKSPACE}/npgw-portal/dist"

                    sh """
                        mkdir -p ${sourceDir}
                        unzip -o ${sourceDir}/${sourceFile} -d ${targetDir}
                    """
                    echo ' → ${sourceFile} unpacked into ${targetDir}'
                }
            }
        }

        stage('Build backend (npgw-services)') {
            steps {
                script {
                    sh """
                        cd ./npgw-services
                        sed -i \"s/<revision>.*<\\/revision>/<revision>${env.RELEASE_VERSION}<\\/revision>/g\" ./pom.xml
                        mvn clean verify
                    """
                }
            }
        }

        stage('Build frontend (npgw-portal)') {
            steps {
                script {
                    sh """
                        cd ./npgw-portal
                        npm install
                        npm run build
                    """
                }
            }
        }

        stage('Test in embedded environment (EE)') {
            when {
                expression {
                    return params.RUN_TESTS
                }
            }
            steps {
                withCredentials([string(credentialsId: 'localstack-auth-token', variable: 'LOCALSTACK_AUTH_TOKEN')]) {
                    script {
                        sh """
                            echo LOCALSTACK_AUTH_TOKEN=${LOCALSTACK_AUTH_TOKEN} > .env
                            cd ./npgw-services/tests/docker/docker-compose
                            ./run-docker-compose-test.sh
                        """
                    }
                }
            }
        }

        stage('Assume Correct AWS Role') {
            steps {
                script {
                    def credentialsJson = sh(script: """
                        aws sts assume-role \
                            --role-arn ${env.AWS_ROLE} \
                            --role-session-name JenkinsUploadSession
                        """, returnStdout: true).trim()

                    env.AWS_ACCESS_KEY_ID = sh(script: "echo '${credentialsJson}' | jq -r '.Credentials.AccessKeyId'", returnStdout: true).trim()
                    env.AWS_SECRET_ACCESS_KEY = sh(script: "echo '${credentialsJson}' | jq -r '.Credentials.SecretAccessKey'", returnStdout: true).trim()
                    env.AWS_SESSION_TOKEN = sh(script: "echo '${credentialsJson}' | jq -r '.Credentials.SessionToken'", returnStdout: true).trim()
                }
            }
        }

        stage('Build and push Docker image') {
            steps {
                script {
                    def imageList = readJSON text: sh(script: "cat ${WORKSPACE}/${IMAGE_FILE}", returnStdout: true).trim()
                    for (image in imageList) {
                        def imageUrl = "${env.AWS_REPOSITORY_URL}/npgw/${image.repoName}:${env.RELEASE_VERSION}"

                        sh """
                        aws ecr get-login-password --region ${env.AWS_REGION} | docker login --username AWS --password-stdin ${env.AWS_REPOSITORY_URL}

                        cd ${WORKSPACE}
                        cd ${image.dockerContext}

                        docker build -t "${imageUrl}" -f ${image.dockerFile} .
                        docker push "${imageUrl}"
                        """
                    }
                }
            }
        }

        stage('Upload portal UI build to S3') {
            steps {
                script {
                    sh """
                    aws s3 sync npgw-portal/dist s3://${env.AWS_BUCKET_NAME}/npgw-portal/build_${env.RELEASE_VERSION}
                    """
                }
            }
        }
    }
}