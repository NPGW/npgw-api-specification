pipeline {
    agent { label 'build-node' }

    parameters {
        string(name: 'RELEASE_VERSION', defaultValue: 'latest', description: 'Image version to use')
        choice(name: 'ENVIRONMENT_NAME', choices: ['test', 'dev', 'prod', 'sandbox'], description: 'Deployment environment')
    }

    environment {
        AWS_REGION = 'eu-central-1'
        AWS_REPOSITORY_URL = '214404897309.dkr.ecr.eu-central-1.amazonaws.com'
    }

    stages {
        stage('Determine url where run tests') {
            steps {
                script {
                    def urls = [
                        'test'   : 'https://test.npgw.xyz',
                        'dev'    : 'https://dev.npgw.xyz',
                        'prod'   : 'n/aYet',
                        'sandbox': 'https://sandbox.npgw.xyz'
                    ]
                    env.URL = urls[params.ENVIRONMENT_NAME] ?: error("Invalid environment: ${params.ENVIRONMENT_NAME}")
                }
            }
        }

        stage('Get Release Version') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'GH_TOKEN', variable: 'GH_TOKEN')]) {
                        if (params.RELEASE_VERSION == 'latest') {
                            env.RELEASE_VERSION = sh(script: """aws ecr describe-images --repository-name npgw/api-test --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text""", returnStdout: true).trim()
                        } else {
                            env.RELEASE_VERSION = params.RELEASE_VERSION
                        }
                    }
                }
            }
        }

        stage('Validate Release Version') {
            steps {
                script {
                    if (!env.RELEASE_VERSION) {
                        error("Release version is null. Exiting...")
                    }
                }
            }
        }

        stage('Run Api Tests') {
            steps {
                script {
                    def imageUrl = "${env.AWS_REPOSITORY_URL}/npgw/api-test:${env.RELEASE_VERSION}"

                    sh """
                    aws ecr get-login-password --region ${env.AWS_REGION} | docker login --username AWS --password-stdin ${env.AWS_REPOSITORY_URL}

                    docker run --rm \\
                        -e SERVICE_MERCHANT_URL=${env.URL}/merchant-v1 \\
                        -e SERVICE_MERCHANT_ID=merchant-server-ngenius \\
                        -e SERVICE_MERCHANT_USER_EMAIL=test@email.com \\
                        -e SERVICE_MERCHANT_USER_PASSWORD=Qwerty123! \\
                        -e SERVICE_PORTAL_URL=${env.URL}/portal-v1 \\
                        -e SERVICE_PORTAL_ID=merchant-server-ngenius \\
                        -e SERVICE_PORTAL_USER_EMAIL=test@email.com \\
                        -e SERVICE_PORTAL_USER_PASSWORD=Qwerty123! \\
                        -e TEST_ENVIRONMENT=AWS \\
                        ${imageUrl}
                    """
                }
            }
        }
    }
}